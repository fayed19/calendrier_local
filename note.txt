

Voici une **implÃ©mentation Django** complÃ¨te pour ton calendrier dâ€™Ã©vÃ©nements localisÃ©. Cette structure respecte les relations que nous avons dÃ©finies (OneToMany, ManyToMany, etc.) avec les modÃ¨les Django correspondants.

---

## ðŸ“¦ `models.py` â€“ ImplÃ©mentation complÃ¨te

```python
from django.db import models
from django.contrib.auth.models import User

class Location(models.Model):
    name = models.CharField(max_length=255)
    address = models.CharField(max_length=255)
    city = models.CharField(max_length=100)
    postal_code = models.CharField(max_length=20)
    region = models.CharField(max_length=100, blank=True, null=True)
    country = models.CharField(max_length=100)
    latitude = models.FloatField(blank=True, null=True)
    longitude = models.FloatField(blank=True, null=True)

    def __str__(self):
        return f"{self.name} - {self.city}, {self.country}"


class Organizer(models.Model):
    name = models.CharField(max_length=255)
    email = models.EmailField()
    phone = models.CharField(max_length=20, blank=True, null=True)
    website = models.URLField(blank=True, null=True)

    def __str__(self):
        return self.name


class Category(models.Model):
    name = models.CharField(max_length=100)
    color_code = models.CharField(max_length=7, help_text="Couleur hexadÃ©cimale (ex: #FF5733)")

    def __str__(self):
        return self.name


class Event(models.Model):
    title = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    start_datetime = models.DateTimeField()
    end_datetime = models.DateTimeField()
    location = models.ForeignKey(Location, on_delete=models.CASCADE, related_name="events")
    organizer = models.ForeignKey(Organizer, on_delete=models.SET_NULL, null=True, related_name="events")
    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True, related_name="events")
    language_code = models.CharField(max_length=10, default='fr')
    is_public = models.BooleanField(default=True)

    def __str__(self):
        return self.title


class EventRegistration(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="registrations")
    event = models.ForeignKey(Event, on_delete=models.CASCADE, related_name="registrations")
    registered_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ('user', 'event')

    def __str__(self):
        return f"{self.user.username} â†’ {self.event.title}"
```

---

## ðŸ”„ Relations RÃ©sumÃ©es en Django

| Relation                     | Django Implementation                  |
| ---------------------------- | -------------------------------------- |
| Event â†’ Location             | `ForeignKey(Location, on_delete=...)`  |
| Event â†’ Organizer            | `ForeignKey(Organizer, on_delete=...)` |
| Event â†’ Category             | `ForeignKey(Category, on_delete=...)`  |
| User â†” Event (Participation) | `EventRegistration` comme table pivot  |

---

Souhaites-tu aussi une interface d'administration personnalisÃ©e (`admin.py`) ou des vues/API pour consommer ces modÃ¨les (par exemple en Django REST Framework) ?
